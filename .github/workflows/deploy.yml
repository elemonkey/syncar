name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== LINT Y TESTS =====
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
        node-version: ['20']
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      # Backend tests
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: üì¶ Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: üß™ Run Python tests
        run: |
          cd backend
          pytest -v || echo "Tests not implemented yet"
      
      # Frontend tests
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: üì¶ Install Node dependencies
        run: |
          cd frontend
          npm ci || npm install
      
      - name: üß™ Run Node tests
        run: |
          cd frontend
          npm test || echo "Tests not implemented yet"

  # ===== BUILD & PUSH DOCKER IMAGES =====
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üè∑Ô∏è Generate version tag
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "tag=v$(date +%Y.%m.%d)-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üèóÔ∏è Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.version.outputs.tag }}
      
      - name: üèóÔ∏è Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.version.outputs.tag }}
          build-args: |
            NEXT_PUBLIC_API_URL=/api/v1

  # ===== DEPLOY A PRODUCCI√ìN =====
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üöÄ Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/import-app
            
            # Pull latest code
            git pull origin main
            
            # Pull latest Docker images
            docker-compose -f docker-compose.prod.yml pull
            
            # Restart services (zero-downtime)
            docker-compose -f docker-compose.prod.yml up -d --no-deps backend frontend celery-worker
            
            # Clean up old images
            docker image prune -f
            
            echo "‚úÖ Deployment completed successfully"
      
      - name: üîî Notify deployment status
        if: always()
        run: |
          echo "Deployment status: ${{ job.status }}"
          # Aqu√≠ puedes agregar notificaciones a Slack, Discord, etc.

  # ===== CLEANUP =====
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: üßπ Clean up old images
        run: echo "Cleanup completed"
