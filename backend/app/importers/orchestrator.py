"""
Orquestador de componentes de importaci√≥n
"""
from typing import List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from playwright.async_api import Browser

from .base import (
    AuthComponent,
    CategoriesComponent,
    ConfigComponent,
    ProductsComponent
)
from app.core.logger import logger


class ImportOrchestrator:
    """
    Orquesta la ejecuci√≥n de componentes en orden correcto
    
    Flujos:
    1. Importaci√≥n de categor√≠as: Auth -> Categories
    2. Importaci√≥n de productos: Auth -> Config -> Products
    """
    
    def __init__(
        self,
        importer_name: str,
        job_id: str,
        db: AsyncSession,
        browser: Browser
    ):
        self.importer_name = importer_name
        self.job_id = job_id
        self.db = db
        self.browser = browser
        self.logger = logger.bind(importer=importer_name, job_id=job_id)
    
    async def import_categories(self) -> Dict[str, Any]:
        """
        Flujo completo de importaci√≥n de categor√≠as
        
        Pasos:
        1. Autenticaci√≥n
        2. Extracci√≥n de categor√≠as
        
        Returns:
            Resultado de la importaci√≥n
        """
        try:
            self.logger.info(f"üöÄ Iniciando importaci√≥n de categor√≠as para {self.importer_name}")
            
            # Paso 1: Autenticaci√≥n
            self.logger.info("Paso 1/2: Autenticaci√≥n")
            auth_component = AuthComponent(
                self.importer_name,
                self.job_id,
                self.db,
                self.browser
            )
            auth_result = await auth_component.execute()
            
            if not auth_result['success']:
                self.logger.error("‚ùå Autenticaci√≥n fallida")
                return {
                    'success': False,
                    'error': 'Authentication failed',
                    'details': auth_result
                }
            
            # Paso 2: Extracci√≥n de categor√≠as
            self.logger.info("Paso 2/2: Extracci√≥n de categor√≠as")
            categories_component = CategoriesComponent(
                self.importer_name,
                self.job_id,
                self.db,
                auth_result['session_data'],
                self.browser
            )
            categories_result = await categories_component.execute()
            
            self.logger.info(f"‚úÖ Importaci√≥n de categor√≠as completada: {categories_result['count']} categor√≠as")
            
            return categories_result
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en importaci√≥n de categor√≠as: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def import_products(self, selected_categories: List[str]) -> Dict[str, Any]:
        """
        Flujo completo de importaci√≥n de productos
        
        Pasos:
        1. Autenticaci√≥n
        2. Carga de configuraci√≥n
        3. Extracci√≥n de productos
        
        Args:
            selected_categories: Lista de nombres de categor√≠as a importar
        
        Returns:
            Resultado de la importaci√≥n
        """
        try:
            self.logger.info(f"üöÄ Iniciando importaci√≥n de productos para {self.importer_name}")
            self.logger.info(f"Categor√≠as seleccionadas: {selected_categories}")
            
            # Paso 1: Autenticaci√≥n
            self.logger.info("Paso 1/3: Autenticaci√≥n")
            auth_component = AuthComponent(
                self.importer_name,
                self.job_id,
                self.db,
                self.browser
            )
            auth_result = await auth_component.execute()
            
            if not auth_result['success']:
                self.logger.error("‚ùå Autenticaci√≥n fallida")
                return {
                    'success': False,
                    'error': 'Authentication failed',
                    'details': auth_result
                }
            
            # Paso 2: Carga de configuraci√≥n
            self.logger.info("Paso 2/3: Carga de configuraci√≥n")
            config_component = ConfigComponent(
                self.importer_name,
                self.job_id,
                self.db,
                self.browser
            )
            config = await config_component.execute()
            
            # Paso 3: Extracci√≥n de productos
            self.logger.info("Paso 3/3: Extracci√≥n de productos")
            products_component = ProductsComponent(
                self.importer_name,
                self.job_id,
                self.db,
                auth_result['session_data'],
                selected_categories,
                config,
                self.browser
            )
            products_result = await products_component.execute()
            
            self.logger.info(f"‚úÖ Importaci√≥n de productos completada: {products_result['products_count']} productos")
            
            return products_result
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en importaci√≥n de productos: {e}")
            return {
                'success': False,
                'error': str(e)
            }
